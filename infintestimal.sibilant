(var assert (require 'assert)
     async (require 'async)
     OK "\033[32m\u2714\033[0m"
     FAIL "\033[31m\u2718\033[0m")

(def arrays-equal? (expected actual)
     (and (array? expected)
          (array? actual)
          (try (do (assert.deep-equal expected actual)
                   true)
               false)))

(def objects-equal? (expected actual)
  (and (object? actual)
       (object? expected)
       (try (do (assert.deep-equal expected actual)
                true)
            false)))

;; Runs a test
;; Each test is a tuple of name, fn
;; Returns a text string with OK or FAIL + comment
(def is (expected actual)
  (if (array? actual)
      (if (arrays-equal? expected actual)
          OK
          (+ FAIL "\n  expected " (JSON.stringify expected)
             " but got " (JSON.stringify actual)))
      (object? actual)
      (if (objects-equal? expected actual)
          OK
          (+ FAIL "\n  expected " (JSON.stringify expected null 2)
             "\nbut got " (JSON.stringify actual null 2)))
      (if (= expected actual)
          OK
          (+ FAIL "\n  expected " expected " but got " actual))))

;; If the test result is OK, then count it as passed
(def passed? (x)
  (= (.substr x 0 10) OK))

;; Count up all the passing tests
(def count-passed (acc x)
  (if (passed? x)
    (+ 1 acc)
    acc))

(def zip (a b)
  ;; zips two arrays together
  ;; (zip [1 2] [a b]) -> [[1 a] [2 b]]
  (a.map (# (item index) [item (get b index)])))

(def wrap-if-sync (f)
  (if (= 0 (length f))
    ;; If function is syncronous (thunk), wrap in a callback
    (# (cb) (cb null (f)))
    ;; else just return it
    (# (cb) (f (# (results) (cb null results))))))

(def reporter (test-result)
  (if (passed? (first test-result))
    (console.log (+ (first test-result) " " (second test-result)))
    (console.log (+ (.substr (first test-result) 0 10) " " (second test-result) (.substr (first test-result) 10)))))

;; Runs the tests and reports the results
;; TODO: take multiple test suite args, run them all and report aggregate pass/fail stats
(def test-runner (tests)
  (console.log "Running tests... \n")
  (var test-fns (tests.map (# (x) (wrap-if-sync (second x))))
       test-names (tests.map (# (x) (first x))))
  (async.parallel test-fns (# (err results)
     (if err
       (console.log "Error:" err)
       ;; Zip results and test names
       (do
         (pipe results
               (zip test-names)
               (.map reporter))
         (var succeeded (.reduce results count-passed 0)
              failed (- (length results) succeeded))
         (console.log (+ "\n" succeeded " tests passed, " failed " failed")))))))


(set module 'exports (hash 'is is
                           'OK OK
                           'arrays-equal? arrays-equal?
                           'objects-equal? objects-equal?
                           'test-runner test-runner))
